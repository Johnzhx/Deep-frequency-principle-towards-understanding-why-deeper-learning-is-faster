To make it convenient, I put the explanation of the programs of 'Resnet181Train.py', 'Resnet182train.py', 'Resnet183Train.py' and 'Resnet184Train.py' in the file 'Resnet181Train.py'. It is becasue that, except for the structure of the varients of the Resnet18, almost everything in those programs are the same. So, I concretely explain the programs in the file 'Resnet181Train.py'.

What's more, in the paper, we show the training process of the LFR. It is simply made by changing the training stage and traning epoch in the program. So, I think there's no need to submit them here. Because the intact training epochs are 80, so the programs here all contains 80 epochs.

Similarly, I put the explanation of the programs of 'Resnet181ComputingLFR.py', 'Resnet182ComputingLFR.py', 'Resnet183ComputingLFR.py' and 'Resnet184ComputingLFR.py' in the file 'Resnet181ComputingLFR.py'. And in the same way, except for the imported model and the order number of the -1 and -2 hidden layers, almost everything in those programs are the same. So, I concretely explain the programs in the file 'Resnet181ComputingLFR.py'.

Importantly, to compute the training process of the LFR. One only need to change the imported model and the order number of the -1 and -2 hidden layers, then he/she could get the coresponding results. The LFR of -2 and -1 hidden layers are saved in R['ratio_last'] respectively at position -2 and -1.

Because of the reason that the trained models are too big to upload, one need to run 'Resnet181Train.py' first, and then use 'Resnet181ComputingLFR.py' to compute LFR.

Finally, after running 'Resnet18xTrain.py' and 'Resnet18xComputingLFR.py', then you could run the program 'PlotCdfAndRdf.py'. This program is used to draw the picture of the training process of the LFR in the papper. To successfully this program, one should make sure that the program ''
